plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.github.willir.rust.cargo-ndk-android"
}


def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace "com.example.my_app"
    compileSdk 34
    ndkVersion '25.2.9519653'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.my_app"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {}

cargoNdk {
    // List of all targets
    // By default: ["arm64", "arm", "x86", "x86_64"]
    targets = ["arm64", "arm"]


    // Path to directory with rust project
    // By default: "app/src/main/rust"
    module = "../rust"

    buildTypes {
        release {
            buildType = "release"
        }
        debug {
            buildType = "debug"
        }
    }


}
//
//[
//        Debug  : null,
//        Profile: '--release',
//        Release: '--release'
//].each {
//    def taskPostfix = it.key
//    def profileMode = it.value
//    tasks.whenTaskAdded { task ->
//        if (task.name == "javaPreCompile$taskPostfix") {
//            task.dependsOn "cargoBuild$taskPostfix"
//        }
//    }
//    tasks.register("cargoBuild$taskPostfix", Exec) {
//        workingDir "../../native"
//        environment ANDROID_NDK_HOME: "$ANDROID_NDK"
//        commandLine 'cargo', 'ndk',
//                // the 2 ABIs below are used by real Android devices
//                '-t', 'armeabi-v7a',
//                '-t', 'arm64-v8a',
//                // the below 2 ABIs are usually used for Android simulators,
//                // add or remove these ABIs as needed.
//                '-t', 'x86',
//                '-t', 'x86_64',
//                '-o', '../android/app/src/main/jniLibs', 'build'
//        if (profileMode != null) {
//            args profileMode
//        }
//    }
//}

//
//[
//        Debug  : null,
//        Profile: '--release',
//        Release: '--release'
//].each {
//    def taskPostfix = it.key
//    def profileMode = it.value
//    tasks.whenTaskAdded { task ->
//        if (task.name == "javaPreCompile$taskPostfix") {
//            task.dependsOn "cargoBuild$taskPostfix"
//        }
//    }
//    tasks.register("cargoBuild$taskPostfix", Exec) {
//        workingDir "../../native"
//        environment ANDROID_NDK_HOME: "$ANDROID_NDK"
//        commandLine 'cargo', 'ndk',
//                // the 2 ABIs below are used by real Android devices
//                '-t', 'armeabi-v7a',
//                '-t', 'arm64-v8a',
//                // the below 2 ABIs are usually used for Android simulators,
//                // add or remove these ABIs as needed.
//                '-t', 'x86',
//                '-t', 'x86_64',
//                '-o', '../android/app/src/main/jniLibs', 'build'
//        if (profileMode != null) {
//            args profileMode
//        }
//    }
//}