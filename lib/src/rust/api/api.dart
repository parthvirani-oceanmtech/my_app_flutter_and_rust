// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<TVecU8> manipulateImage({required ManipulationInput a, dynamic hint}) =>
    RustLib.instance.api.crateApiApiManipulateImage(a: a, hint: hint);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PhotonImage>>
@sealed
class PhotonImage extends RustOpaque {
  PhotonImage.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  PhotonImage.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PhotonImage,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PhotonImage,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PhotonImagePtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PhotonRgba>>
@sealed
class PhotonRgba extends RustOpaque {
  PhotonRgba.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  PhotonRgba.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PhotonRgba,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PhotonRgba,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PhotonRgbaPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T < Vec < u8 > >>>
@sealed
class TVecU8 extends RustOpaque {
  TVecU8.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  TVecU8.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_TVecU8,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_TVecU8,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_TVecU8Ptr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<self>>
@sealed
class Self extends RustOpaque {
  Self.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  Self.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Self,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Self,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SelfPtr,
  );

  Future<TVecU8> save({dynamic hint}) =>
      RustLib.instance.api.crateApiApiSelfSave(that: this, hint: hint);
}

class ManipulationInput {
  final Uint8List originalBytes;
  final List<PhotonFilter> filters;
  final OutputFormat outputFormat;
  final int quality;

  const ManipulationInput({
    required this.originalBytes,
    required this.filters,
    required this.outputFormat,
    required this.quality,
  });

  @override
  int get hashCode =>
      originalBytes.hashCode ^
      filters.hashCode ^
      outputFormat.hashCode ^
      quality.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ManipulationInput &&
          runtimeType == other.runtimeType &&
          originalBytes == other.originalBytes &&
          filters == other.filters &&
          outputFormat == other.outputFormat &&
          quality == other.quality;
}

enum OutputFormat {
  png,
  jpeg,
  gif,
  ;
}

class PhotonFilter {
  final String name;
  final PlatformInt64 val1;
  final PlatformInt64 val2;
  final PlatformInt64 val3;
  final PlatformInt64 val4;
  final Uint8List image2Bytes;
  final Rgba rgba;
  final double val1F;

  const PhotonFilter({
    required this.name,
    required this.val1,
    required this.val2,
    required this.val3,
    required this.val4,
    required this.image2Bytes,
    required this.rgba,
    required this.val1F,
  });

  Future<PhotonImage> apply({required PhotonImage img1, dynamic hint}) =>
      RustLib.instance.api
          .crateApiApiPhotonFilterApply(that: this, img1: img1, hint: hint);

  @override
  int get hashCode =>
      name.hashCode ^
      val1.hashCode ^
      val2.hashCode ^
      val3.hashCode ^
      val4.hashCode ^
      image2Bytes.hashCode ^
      rgba.hashCode ^
      val1F.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PhotonFilter &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          val1 == other.val1 &&
          val2 == other.val2 &&
          val3 == other.val3 &&
          val4 == other.val4 &&
          image2Bytes == other.image2Bytes &&
          rgba == other.rgba &&
          val1F == other.val1F;
}

class Rgba {
  final int r;
  final int g;
  final int b;
  final int a;

  const Rgba({
    required this.r,
    required this.g,
    required this.b,
    required this.a,
  });

  Future<PhotonRgba> toPhotonRgba({dynamic hint}) =>
      RustLib.instance.api.crateApiApiRgbaToPhotonRgba(that: this, hint: hint);

  @override
  int get hashCode => r.hashCode ^ g.hashCode ^ b.hashCode ^ a.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Rgba &&
          runtimeType == other.runtimeType &&
          r == other.r &&
          g == other.g &&
          b == other.b &&
          a == other.a;
}
